import { Input } from "../input/input";
import { Tile } from "../tile/tile";
import { TileItem } from "../tileItem/tileItem";
import { TileItemType } from "../tileItem/tileItemInfo";
import { World } from "../world/world";
import { WorldEvent } from "../world/worldEvents";

export class MoveTileItem {
    public static get isMovingAnyTileItem() { return this._movingTileItem != undefined; }

    private static _hoveringTileItem?: TileItem;
    private static _movingTileItem?: TileItem;
    
    private static _dropAtTile?: Tile;

    private static _tileItemSelected?: TileItem;

    public static init() {
        Input.events.on("pointerup", () => {
            MoveTileItem.stopMoving();
        })

        Input.events.on("pointermove", () => {
            
        })
    }

    public static setWorld(world: World) {
        world.events.on(WorldEvent.TILE_ITEM_POINTER_DOWN, (tileItem: TileItem) => {
            //.log("MoveTileItem TILE_ITEM_POINTER_DOWN");

            
            if(tileItem == this._tileItemSelected) {

                if(!this.isMovingAnyTileItem) {
                    this.startMove(tileItem);
                }


                //tileItem.setTransparent(false);

            }
        })


        if (Debug.consoleLog) console.error("add input events to fix drag");

        world.events.on(WorldEvent.TILE_ITEM_POINTER_UP, (tileItem: TileItem) => {
            //if (Debug.consoleLog) console.log("TILE_ITEM_POINTER_UP")
        })

        world.events.on(WorldEvent.TILE_ITEM_POINTER_OVER, (tileItem: TileItem) => {

        })

        
        world.events.on(WorldEvent.TILE_ITEM_POINTER_OUT, (tileItem: TileItem) => {

        })
    }

    private static unselectCurrentTileItem() {
        
        this._tileItemSelected?.setIsSelected(false);
        this._tileItemSelected = undefined;
    }

    public static trySelectTileItem(tileItem: TileItem) {
        if(tileItem.tileItemInfo.type == TileItemType.FLOOR || tileItem.tileItemInfo.type == TileItemType.WALL || tileItem.tileItemInfo.type == TileItemType.STOVE) return;

        if(this._tileItemSelected) this.unselectCurrentTileItem();

        this._tileItemSelected = tileItem;
        this._tileItemSelected.setIsSelected(true);
        
        

        /*
        this._isSelected = !this._isSelected;
        this.setTransparent(this._isSelected);
        */
    }

    public static setHoveringTileItem(tileItem: TileItem) {
        this._hoveringTileItem = tileItem;

        const movingTileItem = this._movingTileItem;
        if(!movingTileItem) return;

        if(tileItem.tileItemInfo.type == TileItemType.FLOOR) {
            const world = movingTileItem.world;

            const result = world.moveTileItemToTile(movingTileItem, this._hoveringTileItem.tile.x, this._hoveringTileItem.tile.y);

            
            if(result) {
                this._dropAtTile = this._hoveringTileItem.tile;
            }
        }
    }

    public static startMove(tileItem: TileItem) {
        if(tileItem.tileItemInfo.type == TileItemType.FLOOR || tileItem.tileItemInfo.type == TileItemType.WALL) return;

        this._movingTileItem = tileItem;

        tileItem.setIsMoving(true);
    }

    public static stopMoving() {
        if(this._movingTileItem) {

            if (Debug.consoleLog) console.log(Input.isDragging)

            this._movingTileItem.setIsMoving(false);
        }
        this._movingTileItem = undefined;
    }
}