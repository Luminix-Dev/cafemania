import { Dish } from "../dish/dish";
import { DishPlate } from "../dish/dishPlate";
import { TileItemCounter } from "../tileItem/items/tileItemCounter";
import { Utils } from "../utils/utils";
import { SyncType, World } from "../world/world";
import { Player, PlayerType } from "./player";
import { PlayerClient } from "./playerClient";


export class PlayerWaiter extends Player {
    private _checkClientsTime: number = 0;
    private _isBusy: boolean = false;

    private _dishPlate?: DishPlate;
    private _isCarryingDishPlate: boolean = false;
    
    private _goingToCounter: boolean = false;
    private _goingToServe = false;

    constructor(world: World) {
        super(world);
        this._type = PlayerType.WAITER;
        this._spriteTextureName = "PlayerSpriteTexture_Waiter";

        this.speed = 3;
    }
    
    public update(dt: number) {
        super.update(dt);

        this.debugText.setTextLine('status_json', JSON.stringify(this.waiterStatus));

        //waiting for client
        if(this.waiterStatus.state == PlayerWaiterState.WAITING_FOR_CLIENT) {
            this.debugText.setTextLine('state', 'WAITING_FOR_CLIENT');

            if(this.world.sync != SyncType.SYNC) {
                this._checkClientsTime += dt;
                if(this._checkClientsTime >= 1000) {
                    this._checkClientsTime = 0;
                    this.log("looking for clients");
                    this.checkClients_Serve();
                }
            }
        }


        //going to counter
        if(this.waiterStatus.state == PlayerWaiterState.GOING_TO_COUNTER) {
            this.debugText.setTextLine('state', 'GOING_TO_COUNTER');

            if(!this._goingToCounter && !this._goingToServe) {
                this._goingToCounter = true;

                this.log("going to counter")

                const counter = this.world.game.tileItemFactory.getTileItem(this.waiterStatus.counterId!) as TileItemCounter;
                this.walkToTile(counter.tile.x, counter.tile.y, () => {
                    this.onReachCounter();
                });
            }
        }

        if(this.waiterStatus.state == PlayerWaiterState.GOING_TO_SERVE_CLIENT) {
            this.debugText.setTextLine('state', 'GOING_TO_SERVE_CLIENT');

            if(!this._goingToServe) {
                this._isCarryingDishPlate = true;
                this._goingToServe = true;

                this.log("going to serve")

                const player = this.world.getPlayer(this.waiterStatus.servingId!) as PlayerClient;
                this.walkToTile(player.atTile.x, player.atTile.y, () => {
                    this.onReachTable();
                });
            }
        }
        
    }

    private onReachTable() {
        this._goingToServe = false;
        this._isCarryingDishPlate = false;

        this.waiterStatus.state = PlayerWaiterState.WAITING_FOR_CLIENT;

        try {
            const counter = this.world.game.tileItemFactory.getTileItem(this.waiterStatus.counterId!) as TileItemCounter;
            const dish = counter.getDish();
            const player = this.world.getPlayer(this.waiterStatus.servingId!) as PlayerClient;
            const table = player.getChairPlayerIsSitting()!.getTableInFront()!;

            table.setDish(dish);
        } catch (error) {
            if (Debug.consoleLog) console.warn("no data")
        }
        

        this.waiterStatus.servingId = undefined;
        this.waiterStatus.counterId = undefined;


        this.setAsChangedState();
    }

    private onReachCounter() {
        this._goingToCounter = false;

        this.waiterStatus.state = PlayerWaiterState.GOING_TO_SERVE_CLIENT;

        this.setAsChangedState();
    }

    public render(dt: number) {
        super.render(dt);
        this.renderDishPlate();
    }

    private renderDishPlate() {
        if(this._isCarryingDishPlate) {
            if(!this._dishPlate) {
                const counter = this.world.game.tileItemFactory.getTileItem(this.waiterStatus.counterId!) as TileItemCounter;
                const dish = counter.getDish();
                this._dishPlate = new DishPlate(dish);
            }
            const h = 20;
            const position = new Phaser.Math.Vector2(
                this.position.x,
                this.position.y - h
            )
            this._dishPlate.setPosition(position.x, position.y) ;
            this._dishPlate.setDepth(position.y + h);
        } else {
            if(this._dishPlate) {
                this._dishPlate.destroy()
                this._dishPlate = undefined
            }
        }
    }

    private checkClients_Serve() {
        const client = this.getRandomPlayerWaitingForWaiter();
        const counter = this.getAnyAvaliableCounter();

        this.debugText.setTextLine('serve', "-");

        if(!client) return;

        this.debugText.setTextLine('serve', "could not find food");
        this.log("no food");

        if(!counter) return;

        this.taskServeClient(client, counter);

    }

    public taskServeClient(client: PlayerClient, counter: TileItemCounter) {
        client.waitingForWaiter = false;
        this.log("begin serve");
        
        this.waiterStatus.state = PlayerWaiterState.GOING_TO_COUNTER;
        this.waiterStatus.servingId = client.id;
        this.waiterStatus.counterId = counter.id;

        this.setAsChangedState();

        return;

        

        

    }

    /*
    private beginServe() {
        if (Debug.consoleLog) console.log(this.waiterStatus)

        const counter = this.world.game.tileItemFactory.getTileItem(this.waiterStatus.counterId!) as TileItemCounter;

        if(!counter) {
            this.log("counter not found ", this.waiterStatus.counterId!)
            return;
        }

        const client = this.world.getPlayer(this.waiterStatus.servingId!) as PlayerClient;

        const dish = counter.getDish();

        
        this._servingPlayer = client;
        this._servingCounter = counter;
        this._servingDish = dish;
    

        this.debugText.setTextLine('serve', "serving " + dish.id);

        this.onGoingToCounter();

            
        this.taskExecuteFunction(async() => { this.onReachCounter(); })
        this.taskWalkNearToTile(client.getChairPlayerIsSitting()!.getTableInFront()!.tile);
        this.taskExecuteFunction(async() => { this.onReachTable(); })
    }
    */

   
    /*
    private onReachCounter() {  
        this._servingCounter!.amountWaitersComing--;
        this._servingCounter!.addDishAmount(-1);
        this._isCarryingDishPlate = true;
    }
    */

    /*
    private onReachTable() {
        const client = this._servingPlayer!
        const dish = this._servingDish!
        const counter = this._servingCounter!

        const table = client.getChairPlayerIsSitting()!.getTableInFront()!;

        table.setDish(dish);

        this._isBusy = false;
        this._isCarryingDishPlate = false;

        this._servingPlayer = undefined
        this._servingDish = undefined
        this._servingCounter = counter
        
    }
    */

    private getRandomPlayerWaitingForWaiter() {
        const players = Utils.shuffleArray(this.world.getPlayerClients());
        for (const player of players) {
            if(player.waitingForWaiter) return player;
        }
        return;
    }

    public getAnyAvaliableCounter() {
        const counters = this.world.getCounters().filter(counter => {
            if(counter.isEmpty) return false
            const servings = counter.getDishAmount() - counter.amountWaitersComing
            if(servings <= 0) return false
            return true
        })
        if(counters.length == 0) return
        return Utils.shuffleArray(counters)[0]
    }

    public serializeStatus() {
        return this.waiterStatus;
    }
}